<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20180605 09:16:41" type="library" name="String" format="ROBOT">
<version>2.8.5</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>A test library for string manipulation and verification.

`String` is Robot Framework's standard library for manipulating
strings (e.g. `Replace String Using Regexp`, `Split To Lines`) and
verifying their contents (e.g. `Should Be String`).

Following keywords from `BuiltIn` library can also be used with strings:

- `Catenate`
- `Get Length`
- `Length Should Be`
- `Should (Not) Be Empty`
- `Should (Not) Be Equal (As Strings/Integers/Numbers)`
- `Should (Not) Match (Regexp)`
- `Should (Not) Contain`
- `Should (Not) Start With`
- `Should (Not) End With`
- `Convert To String`
- `Convert To Bytes`</doc>
<kw name="Decode Bytes To String">
<arguments>
<arg>bytes</arg>
<arg>encoding</arg>
<arg>errors=strict</arg>
</arguments>
<doc>Decodes the given `bytes` to a Unicode string using the given `encoding`.

`errors` argument controls what to do if decoding some bytes fails.
All values accepted by `decode` method in Python are valid, but in
practice the following values are most useful:

- `strict`: fail if characters cannot be decoded (default)
- `ignore`: ignore characters that cannot be decoded
- `replace`: replace characters that cannot be decoded with
  a replacement character

Examples:
| ${string} = | Decode Bytes To String | ${bytes} | UTF-8 |
| ${string} = | Decode Bytes To String | ${bytes} | ASCII | errors=ignore |

Use `Encode String To Bytes` if you need to convert Unicode strings to
byte strings, and `Convert To String` in `BuiltIn` if you need to
convert arbitrary objects to Unicode strings.

New in Robot Framework 2.7.7.</doc>
</kw>
<kw name="Encode String To Bytes">
<arguments>
<arg>string</arg>
<arg>encoding</arg>
<arg>errors=strict</arg>
</arguments>
<doc>Encodes the given Unicode `string` to bytes using the given `encoding`.

`errors` argument controls what to do if encoding some characters fails.
All values accepted by `encode` method in Python are valid, but in
practice the following values are most useful:

- `strict`: fail if characters cannot be encoded (default)
- `ignore`: ignore characters that cannot be encoded
- `replace`: replace characters that cannot be encoded with
  a replacement character

Examples:
| ${bytes} = | Encode String To Bytes | ${string} | UTF-8 |
| ${bytes} = | Encode String To Bytes | ${string} | ASCII | errors=ignore |

Use `Convert To Bytes` in `BuiltIn` if you want to create bytes based
on character or integer sequences. Use `Decode Bytes To String` if you
need to convert byte strings to Unicode strings and `Convert To String`
in `BuiltIn` if you need to convert arbitrary objects to Unicode.

New in Robot Framework 2.7.7.</doc>
</kw>
<kw name="Fetch From Left">
<arguments>
<arg>string</arg>
<arg>marker</arg>
</arguments>
<doc>Returns contents of the `string` before the first occurrence of `marker`.

If the `marker` is not found, whole string is returned.

See also `Fetch From Right`, `Split String` and `Split String
From Right`.</doc>
</kw>
<kw name="Fetch From Right">
<arguments>
<arg>string</arg>
<arg>marker</arg>
</arguments>
<doc>Returns contents of the `string` after the last occurrence of `marker`.

If the `marker` is not found, whole string is returned.

See also `Fetch From Left`, `Split String` and `Split String
From Right`.</doc>
</kw>
<kw name="Generate Random String">
<arguments>
<arg>length=8</arg>
<arg>chars=[LETTERS][NUMBERS]</arg>
</arguments>
<doc>Generates a string with a desired `length` from the given `chars`.

The population sequence `chars` contains the characters to use
when generating the random string. It can contain any
characters, and it is possible to use special markers
explained in the table below:

| = Marker =  |              = Explanation =                |
| _[LOWER]_   | Lowercase ASCII characters from 'a' to 'z'. |
| _[UPPER]_   | Uppercase ASCII characters from 'A' to 'Z'. |
| _[LETTERS]_ | Lowercase and uppercase ASCII characters.   |
| _[NUMBERS]_ | Numbers from 0 to 9. |

Examples:
| ${ret} = | Generate Random String |
| ${low} = | Generate Random String | 12 | [LOWER]         |
| ${bin} = | Generate Random String | 8  | 01              |
| ${hex} = | Generate Random String | 4  | [NUMBERS]abcdef |</doc>
</kw>
<kw name="Get Line">
<arguments>
<arg>string</arg>
<arg>line_number</arg>
</arguments>
<doc>Returns the specified line from the given `string`.

Line numbering starts from 0 and it is possible to use
negative indices to refer to lines from the end. The line is
returned without the newline character.

Examples:
| ${first} =    | Get Line | ${string} | 0  |
| ${2nd last} = | Get Line | ${string} | -2 |</doc>
</kw>
<kw name="Get Line Count">
<arguments>
<arg>string</arg>
</arguments>
<doc>Returns and logs the number of lines in the given `string`.</doc>
</kw>
<kw name="Get Lines Containing String">
<arguments>
<arg>string</arg>
<arg>pattern</arg>
<arg>case_insensitive=False</arg>
</arguments>
<doc>Returns lines of the given `string` that contain the `pattern`.

The `pattern` is always considered to be a normal string and a
line matches if the `pattern` is found anywhere in it. By
default the match is case-sensitive, but setting
`case_insensitive` to any value makes it case-insensitive.

Lines are returned as one string catenated back together with
newlines. Possible trailing newline is never returned. The
number of matching lines is automatically logged.

Examples:
| ${lines} = | Get Lines Containing String | ${result} | An example |
| ${ret} =   | Get Lines Containing String | ${ret} | FAIL | case-insensitive |

See `Get Lines Matching Pattern` and `Get Lines Matching Regexp`
if you need more complex pattern matching.</doc>
</kw>
<kw name="Get Lines Matching Pattern">
<arguments>
<arg>string</arg>
<arg>pattern</arg>
<arg>case_insensitive=False</arg>
</arguments>
<doc>Returns lines of the given `string` that match the `pattern`.

The `pattern` is a _glob pattern_ where:
| *        | matches everything |
| ?        | matches any single character |
| [chars]  | matches any character inside square brackets (e.g. '[abc]' matches either 'a', 'b' or 'c') |
| [!chars] | matches any character not inside square brackets |

A line matches only if it matches the `pattern` fully.  By
default the match is case-sensitive, but setting
`case_insensitive` to any value makes it case-insensitive.

Lines are returned as one string catenated back together with
newlines. Possible trailing newline is never returned. The
number of matching lines is automatically logged.

Examples:
| ${lines} = | Get Lines Matching Pattern | ${result} | Wild???? example |
| ${ret} = | Get Lines Matching Pattern | ${ret} | FAIL: * | case-insensitive |

See `Get Lines Matching Regexp` if you need more complex
patterns and `Get Lines Containing String` if searching
literal strings is enough.</doc>
</kw>
<kw name="Get Lines Matching Regexp">
<arguments>
<arg>string</arg>
<arg>pattern</arg>
</arguments>
<doc>Returns lines of the given `string` that match the regexp `pattern`.

See `BuiltIn.Should Match Regexp` for more information about
Python regular expression syntax in general and how to use it
in Robot Framework test data in particular. A line matches
only if it matches the `pattern` fully. Notice that to make
the match case-insensitive, you need to embed case-insensitive
flag into the pattern.

Lines are returned as one string catenated back together with
newlines. Possible trailing newline is never returned. The
number of matching lines is automatically logged.

Examples:
| ${lines} = | Get Lines Matching Regexp | ${result} | Reg\\w{3} example |
| ${ret} = | Get Lines Matching Regexp | ${ret} | (?i)FAIL: .* |

See `Get Lines Matching Pattern` and `Get Lines Containing
String` if you do not need full regular expression powers (and
complexity).</doc>
</kw>
<kw name="Get Substring">
<arguments>
<arg>string</arg>
<arg>start</arg>
<arg>end=None</arg>
</arguments>
<doc>Returns a substring from `start` index to `end` index.

The `start` index is inclusive and `end` is exclusive.
Indexing starts from 0, and it is possible to use
negative indices to refer to characters from the end.

Examples:
| ${ignore first} = | Get Substring | ${string} | 1  |    |
| ${ignore last} =  | Get Substring | ${string} |    | -1 |
| ${5th to 10th} =  | Get Substring | ${string} | 4  | 10 |
| ${first two} =    | Get Substring | ${string} |    | 1  |
| ${last two} =     | Get Substring | ${string} | -2 |    |</doc>
</kw>
<kw name="Remove String">
<arguments>
<arg>string</arg>
<arg>*removables</arg>
</arguments>
<doc>Removes all `removables` from the given `string`.

`removables` are used as literal strings. Each removable will be
matched to a temporary string from which preceding removables have
been already removed. See second example below.

Use `Remove String Using Regexp` if more powerful pattern matching is
needed. If only a certain number of matches should be removed,
`Replace String` or `Replace String Using Regexp` can be used.

A modified version of the string is returned and the original
string is not altered.

Examples:
| ${str} =        | Remove String | Robot Framework | work   |
| Should Be Equal | ${str}        | Robot Frame     |
| ${str} =        | Remove String | Robot Framework | o | bt |
| Should Be Equal | ${str}        | R Framewrk      |

New in Robot Framework 2.8.2.</doc>
</kw>
<kw name="Remove String Using Regexp">
<arguments>
<arg>string</arg>
<arg>*patterns</arg>
</arguments>
<doc>Removes `patterns` from the given `string`.

This keyword is otherwise identical to `Remove String`, but
the `patterns` to search for are considered to be a regular
expression. See `Replace String Using Regexp` for more information
about the regular expression syntax. That keyword can also be
used if there is a need to remove only a certain number of
occurrences.

New in Robot Framework 2.8.2.</doc>
</kw>
<kw name="Replace String">
<arguments>
<arg>string</arg>
<arg>search_for</arg>
<arg>replace_with</arg>
<arg>count=-1</arg>
</arguments>
<doc>Replaces `search_for` in the given `string` with `replace_with`.

`search_for` is used as a literal string. See `Replace String
Using Regexp` if more powerful pattern matching is needed.
If you need to just remove a string see `Remove String`.

If the optional argument `count` is given, only that many
occurrences from left are replaced. Negative `count` means
that all occurrences are replaced (default behaviour) and zero
means that nothing is done.

A modified version of the string is returned and the original
string is not altered.

Examples:
| ${str} =        | Replace String | Hello, world!  | world | tellus   |
| Should Be Equal | ${str}         | Hello, tellus! |       |          |
| ${str} =        | Replace String | Hello, world!  | l     | ${EMPTY} | count=1 |
| Should Be Equal | ${str}         | Helo, world!   |       |          |</doc>
</kw>
<kw name="Replace String Using Regexp">
<arguments>
<arg>string</arg>
<arg>pattern</arg>
<arg>replace_with</arg>
<arg>count=-1</arg>
</arguments>
<doc>Replaces `pattern` in the given `string` with `replace_with`.

This keyword is otherwise identical to `Replace String`, but
the `pattern` to search for is considered to be a regular
expression.  See `BuiltIn.Should Match Regexp` for more
information about Python regular expression syntax in general
and how to use it in Robot Framework test data in particular.

If you need to just remove a string see `Remove String Using Regexp`.

Examples:
| ${str} = | Replace String Using Regexp | ${str} | 20\\d\\d-\\d\\d-\\d\\d | &lt;DATE&gt; |
| ${str} = | Replace String Using Regexp | ${str} | (Hello|Hi) | ${EMPTY} | count=1 |</doc>
</kw>
<kw name="Should Be Byte String">
<arguments>
<arg>item</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the given `item` is not a byte string.

Use `Should Be Unicode String` if you want to verify the `item` is a
Unicode string, or `Should Be String` if both Unicode and byte strings
are fine.

The default error message can be overridden with the optional
`msg` argument.

New in Robot Framework 2.7.7.</doc>
</kw>
<kw name="Should Be Lowercase">
<arguments>
<arg>string</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the given `string` is not in lowercase.

For example 'string' and 'with specials!' would pass, and 'String', ''
and ' ' would fail.

The default error message can be overridden with the optional
`msg` argument.

See also `Should Be Uppercase` and `Should Be Titlecase`.
All these keywords were added in Robot Framework 2.1.2.</doc>
</kw>
<kw name="Should Be String">
<arguments>
<arg>item</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the given `item` is not a string.

This keyword passes regardless is the `item` is a Unicode string or
a byte string. Use `Should Be Unicode String` or `Should Be Byte
String` if you want to restrict the string type.

The default error message can be overridden with the optional
`msg` argument.</doc>
</kw>
<kw name="Should Be Titlecase">
<arguments>
<arg>string</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if given `string` is not title.

`string` is a titlecased string if there is at least one
character in it, uppercase characters only follow uncased
characters and lowercase characters only cased ones.

For example 'This Is Title' would pass, and 'Word In UPPER',
'Word In lower', '' and ' ' would fail.

The default error message can be overridden with the optional
`msg` argument.

See also `Should Be Uppercase` and `Should Be Lowercase`.
All theses keyword were added in Robot Framework 2.1.2.</doc>
</kw>
<kw name="Should Be Unicode String">
<arguments>
<arg>item</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the given `item` is not a Unicode string.

Use `Should Be Byte String` if you want to verify the `item` is a
byte string, or `Should Be String` if both Unicode and byte strings
are fine.

The default error message can be overridden with the optional
`msg` argument.

New in Robot Framework 2.7.7.</doc>
</kw>
<kw name="Should Be Uppercase">
<arguments>
<arg>string</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the given `string` is not in uppercase.

For example 'STRING' and 'WITH SPECIALS!' would pass, and 'String', ''
and ' ' would fail.

The default error message can be overridden with the optional
`msg` argument.

See also `Should Be Titlecase` and `Should Be Lowercase`.
All these keywords were added in Robot Framework 2.1.2.</doc>
</kw>
<kw name="Should Not Be String">
<arguments>
<arg>item</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the given `item` is a string.

The default error message can be overridden with the optional
`msg` argument.</doc>
</kw>
<kw name="Split String">
<arguments>
<arg>string</arg>
<arg>separator=None</arg>
<arg>max_split=-1</arg>
</arguments>
<doc>Splits the `string` using `separator` as a delimiter string.

If a `separator` is not given, any whitespace string is a
separator. In that case also possible consecutive whitespace
as well as leading and trailing whitespace is ignored.

Split words are returned as a list. If the optional
`max_split` is given, at most `max_split` splits are done, and
the returned list will have maximum `max_split + 1` elements.

Examples:
| @{words} =         | Split String | ${string} |
| @{words} =         | Split String | ${string} | ,${SPACE} |
| ${pre} | ${post} = | Split String | ${string} | ::    | 1 |

See `Split String From Right` if you want to start splitting
from right, and `Fetch From Left` and `Fetch From Right` if
you only want to get first/last part of the string.</doc>
</kw>
<kw name="Split String From Right">
<arguments>
<arg>string</arg>
<arg>separator=None</arg>
<arg>max_split=-1</arg>
</arguments>
<doc>Splits the `string` using `separator` starting from right.

Same as `Split String`, but splitting is started from right. This has
an effect only when `max_split` is given.

Examples:
| ${first} | ${rest} = | Split String            | ${string} | - | 1 |
| ${rest}  | ${last} = | Split String From Right | ${string} | - | 1 |</doc>
</kw>
<kw name="Split String To Characters">
<arguments>
<arg>string</arg>
</arguments>
<doc>Splits the given `string` to characters.

Example:
| @{characters} = | Split String To Characters | ${string} |

New in Robot Framework 2.7.</doc>
</kw>
<kw name="Split To Lines">
<arguments>
<arg>string</arg>
<arg>start=0</arg>
<arg>end=None</arg>
</arguments>
<doc>Converts the `string` into a list of lines.

It is possible to get only a selection of lines from `start`
to `end` so that `start` index is inclusive and `end` is
exclusive. Line numbering starts from 0, and it is possible to
use negative indices to refer to lines from the end.

Lines are returned without the newlines. The number of
returned lines is automatically logged.

Examples:
| @{lines} =        | Split To Lines | ${manylines} |    |    |
| @{ignore first} = | Split To Lines | ${manylines} | 1  |    |
| @{ignore last} =  | Split To Lines | ${manylines} |    | -1 |
| @{5th to 10th} =  | Split To Lines | ${manylines} | 4  | 10 |
| @{first two} =    | Split To Lines | ${manylines} |    | 1  |
| @{last two} =     | Split To Lines | ${manylines} | -2 |    |

Use `Get Line` if you only need to get a single line.</doc>
</kw>
</keywordspec>
