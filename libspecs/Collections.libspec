<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20180605 09:16:41" type="library" name="Collections" format="ROBOT">
<version>2.8.5</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>A test library providing keywords for handling lists and dictionaries.

`Collections` is Robot Framework's standard library that provides a
set of keywords for handling Python lists and dictionaries. This
library has keywords, for example, for modifying and getting
values from lists and dictionaries (e.g. `Append To List`, `Get
From Dictionary`) and for verifying their contents (e.g. `Lists
Should Be Equal`, `Dictionary Should Contain Value`).

Following keywords from the BuiltIn library can also be used with
lists and dictionaries:
| *Keyword Name*               | *Applicable With* |
| `Create List`                | lists |
| `Get Length`                 | both  |
| `Length Should Be`           | both  |
| `Should Be Empty`            | both  |
| `Should Not Be Empty`        | both  |
| `Should Contain`             | lists |
| `Should Not Contain`         | lists |
| `Should Contain X Times`     | lists |
| `Should Not Contain X Times` | lists |
| `Get Count`                  | lists |

All list keywords expect a scalar variable (e.g. ${list}) as an
argument.  It is, however, possible to use list variables
(e.g. @{list}) as scalars simply by replacing '@' with '$'.

List keywords that do not alter the given list can also be used
with tuples, and to some extend also with other iterables.
`Convert To List` can be used to convert tuples and other iterables
to lists.

-------

List related keywords use variables in format ${Lx} in their examples,
which means a list with as many alphabetic characters as specified by 'x'.
For example ${L1} means ['a'] and ${L3} means ['a', 'b', 'c'].

Dictionary keywords use similar ${Dx} variables. For example ${D1} means
{'a': 1} and ${D3} means {'a': 1, 'b': 2, 'c': 3}.

--------</doc>
<kw name="Append To List">
<arguments>
<arg>list_</arg>
<arg>*values</arg>
</arguments>
<doc>Adds `values` to the end of `list`.

Example:
| Append To List | ${L1} | xxx |   |   |
| Append To List | ${L2} | x   | y | z |
=&gt;
- ${L1} = ['a', 'xxx']
- ${L2} = ['a', 'b', 'x', 'y', 'z']</doc>
</kw>
<kw name="Combine Lists">
<arguments>
<arg>*lists</arg>
</arguments>
<doc>Combines the given `lists` together and returns the result.

The given lists are not altered by this keyword.

Example:
| ${x} = | Combine List | ${L1} | ${L2} |       |
| ${y} = | Combine List | ${L1} | ${L2} | ${L1} |
=&gt;
- ${x} = ['a', 'a', 'b']
- ${y} = ['a', 'a', 'b', 'a']
- ${L1} and ${L2} are not changed.</doc>
</kw>
<kw name="Convert To List">
<arguments>
<arg>item</arg>
</arguments>
<doc>Converts the given `item` to a list.

Mainly useful for converting tuples and other iterable to lists.
Use `Create List` from the BuiltIn library for constructing new lists.</doc>
</kw>
<kw name="Copy Dictionary">
<arguments>
<arg>dictionary</arg>
</arguments>
<doc>Returns a copy of the given dictionary.

The given dictionary is never altered by this keyword.</doc>
</kw>
<kw name="Copy List">
<arguments>
<arg>list_</arg>
</arguments>
<doc>Returns a copy of the given list.

The given list is never altered by this keyword.</doc>
</kw>
<kw name="Count Values In List">
<arguments>
<arg>list_</arg>
<arg>value</arg>
<arg>start=0</arg>
<arg>end=None</arg>
</arguments>
<doc>Returns the number of occurrences of the given `value` in `list`.

The search can be narrowed to the selected sublist by the `start` and
`end` indexes having the same semantics as in the `Get Slice From List`
keyword. The given list is never altered by this keyword.

Example:
| ${x} = | Count Values In List | ${L3} | b |
=&gt;
- ${x} = 1
- ${L3} is not changed</doc>
</kw>
<kw name="Create Dictionary">
<arguments>
<arg>*key_value_pairs</arg>
<arg>**items</arg>
</arguments>
<doc>Creates and returns a dictionary based on given items.

Giving items as `key_value_pairs` means giving keys and values
as separate arguments:

| ${x} = | Create Dictionary | name | value |   |      |
| ${y} = | Create Dictionary | a    | 1     | b | ${2} |
=&gt;
- ${x} = {'name': 'value'}
- ${y} = {'a': '1', 'b': 2}

Starting from Robot Framework 2.8.1, items can also be given as kwargs:

| ${x} = | Create Dictionary | name=value |        |
| ${y} = | Create Dictionary | a=1        | b=${2} |

The latter syntax is typically more convenient to use, but it has
a limitation that keys must be strings.</doc>
</kw>
<kw name="Dictionaries Should Be Equal">
<arguments>
<arg>dict1</arg>
<arg>dict2</arg>
<arg>msg=None</arg>
<arg>values=True</arg>
</arguments>
<doc>Fails if the given dictionaries are not equal.

First the equality of dictionaries' keys is checked and after that all
the key value pairs. If there are differences between the values, those
are listed in the error message.

See `Lists Should Be Equal` for an explanation of `msg`.
The given dictionaries are never altered by this keyword.</doc>
</kw>
<kw name="Dictionary Should Contain Item">
<arguments>
<arg>dictionary</arg>
<arg>key</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>An item of `key`/`value` must be found in a `dictionary`.

Value is converted to unicode for comparison.

See `Lists Should Be Equal` for an explanation of `msg`.
The given dictionary is never altered by this keyword.</doc>
</kw>
<kw name="Dictionary Should Contain Key">
<arguments>
<arg>dictionary</arg>
<arg>key</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if `key` is not found from `dictionary`.

See `List Should Contain Value` for an explanation of `msg`.

The given dictionary is never altered by this keyword.</doc>
</kw>
<kw name="Dictionary Should Contain Sub Dictionary">
<arguments>
<arg>dict1</arg>
<arg>dict2</arg>
<arg>msg=None</arg>
<arg>values=True</arg>
</arguments>
<doc>Fails unless all items in `dict2` are found from `dict1`.

See `Lists Should Be Equal` for an explanation of `msg`.
The given dictionaries are never altered by this keyword.</doc>
</kw>
<kw name="Dictionary Should Contain Value">
<arguments>
<arg>dictionary</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if `value` is not found from `dictionary`.

See `List Should Contain Value` for an explanation of `msg`.

The given dictionary is never altered by this keyword.</doc>
</kw>
<kw name="Dictionary Should Not Contain Key">
<arguments>
<arg>dictionary</arg>
<arg>key</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if `key` is found from `dictionary`.

See `List Should Contain Value` for an explanation of `msg`.

The given dictionary is never altered by this keyword.</doc>
</kw>
<kw name="Dictionary Should Not Contain Value">
<arguments>
<arg>dictionary</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if `value` is found from `dictionary`.

See `List Should Contain Value` for an explanation of `msg`.

The given dictionary is never altered by this keyword.</doc>
</kw>
<kw name="Get Dictionary Items">
<arguments>
<arg>dictionary</arg>
</arguments>
<doc>Returns items of the given `dictionary`.

Items are returned sorted by keys. The given `dictionary` is not
altered by this keyword.

Example:
| ${items} = | Get Dictionary Items | ${D3} |
=&gt;
- ${items} = ['a', 1, 'b', 2, 'c', 3]</doc>
</kw>
<kw name="Get Dictionary Keys">
<arguments>
<arg>dictionary</arg>
</arguments>
<doc>Returns `keys` of the given `dictionary`.

`Keys` are returned in sorted order. The given `dictionary` is never
altered by this keyword.

Example:
| ${keys} = | Get Dictionary Keys | ${D3} |
=&gt;
- ${keys} = ['a', 'b', 'c']</doc>
</kw>
<kw name="Get Dictionary Values">
<arguments>
<arg>dictionary</arg>
</arguments>
<doc>Returns values of the given dictionary.

Values are returned sorted according to keys. The given dictionary is
never altered by this keyword.

Example:
| ${values} = | Get Dictionary Values | ${D3} |
=&gt;
- ${values} = [1, 2, 3]</doc>
</kw>
<kw name="Get From Dictionary">
<arguments>
<arg>dictionary</arg>
<arg>key</arg>
</arguments>
<doc>Returns a value from the given `dictionary` based on the given `key`.

If the given `key` cannot be found from the `dictionary`, this keyword
fails.

The given dictionary is never altered by this keyword.

Example:
| ${value} = | Get From Dictionary | ${D3} | b |
=&gt;
- ${value} = 2</doc>
</kw>
<kw name="Get From List">
<arguments>
<arg>list_</arg>
<arg>index</arg>
</arguments>
<doc>Returns the value specified with an `index` from `list`.

The given list is never altered by this keyword.

Index '0' means the first position, '1' the second, and so on.
Similarly, '-1' is the last position, '-2' the second last, and so on.
Using an index that does not exist on the list causes an error.
The index can be either an integer or a string that can be converted
to an integer.

Examples (including Python equivalents in comments):
| ${x} = | Get From List | ${L5} | 0  | # L5[0]  |
| ${y} = | Get From List | ${L5} | -2 | # L5[-2] |
=&gt;
- ${x} = 'a'
- ${y} = 'd'
- ${L5} is not changed</doc>
</kw>
<kw name="Get Index From List">
<arguments>
<arg>list_</arg>
<arg>value</arg>
<arg>start=0</arg>
<arg>end=None</arg>
</arguments>
<doc>Returns the index of the first occurrence of the `value` on the list.

The search can be narrowed to the selected sublist by the `start` and
`end` indexes having the same semantics as in the `Get Slice From List`
keyword. In case the value is not found, -1 is returned. The given list
is never altered by this keyword.

Example:
| ${x} = | Get Index From List | ${L5} | d |
=&gt;
- ${x} = 3
- ${L5} is not changed</doc>
</kw>
<kw name="Get Slice From List">
<arguments>
<arg>list_</arg>
<arg>start=0</arg>
<arg>end=None</arg>
</arguments>
<doc>Returns a slice of the given list between `start` and `end` indexes.

The given list is never altered by this keyword.

If both `start` and `end` are given, a sublist containing values from
`start` to `end` is returned. This is the same as 'list[start:end]' in
Python. To get all items from the beginning, use 0 as the start value,
and to get all items until the end, use 'None' as the end value. 'None'
is also a default value, so in this case, it is enough to give only
`start`. If only `end` is given, `start` gets the value 0.

Using `start` or `end` not found on the list is the same as using the
largest (or smallest) available index.

Examples (incl. Python equivelants in comments):
| ${x} = | Get Slice From List | ${L5} | 2 | 4  | # L5[2:4]    |
| ${y} = | Get Slice From List | ${L5} | 1 |    | # L5[1:None] |
| ${z} = | Get Slice From List | ${L5} |   | -2 | # L5[0:-2]   |
=&gt;
- ${x} = ['c', 'd']
- ${y} = ['b', 'c', 'd', 'e']
- ${z} = ['a', 'b', 'c']
- ${L5} is not changed</doc>
</kw>
<kw name="Insert Into List">
<arguments>
<arg>list_</arg>
<arg>index</arg>
<arg>value</arg>
</arguments>
<doc>Inserts `value` into `list` to the position specified with `index`.

Index '0' adds the value into the first position, '1' to the second,
and so on. Inserting from right works with negative indices so that
'-1' is the second last position, '-2' third last, and so on. Use
`Append To List` to add items to the end of the list.

If the absolute value of the index is greater than
the length of the list, the value is added at the end
(positive index) or the beginning (negative index). An index
can be given either as an integer or a string that can be
converted to an integer.

Example:
| Insert Into List | ${L1} | 0     | xxx |
| Insert Into List | ${L2} | ${-1} | xxx |
=&gt;
- ${L1} = ['xxx', 'a']
- ${L2} = ['a', 'xxx', 'b']</doc>
</kw>
<kw name="Keep In Dictionary">
<arguments>
<arg>dictionary</arg>
<arg>*keys</arg>
</arguments>
<doc>Keeps the given `keys` in the `dictionary` and removes all other.

If the given `key` cannot be found from the `dictionary`, it
is ignored.

Example:
| Keep In Dictionary | ${D5} | b | x | d |
=&gt;
- ${D5} = {'b': 2, 'd': 4}</doc>
</kw>
<kw name="List Should Contain Sub List">
<arguments>
<arg>list1</arg>
<arg>list2</arg>
<arg>msg=None</arg>
<arg>values=True</arg>
</arguments>
<doc>Fails if not all of the elements in `list2` are found in `list1`.

The order of values and the number of values are not taken into
account.

See the use of `msg` and `values` from the `Lists Should Be Equal`
keyword.</doc>
</kw>
<kw name="List Should Contain Value">
<arguments>
<arg>list_</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the `value` is not found from `list`.

If `msg` is not given, the default error message "[ a | b | c ] does
not contain the value 'x'" is shown in case of a failure. Otherwise,
the given `msg` is used in case of a failure.</doc>
</kw>
<kw name="List Should Not Contain Duplicates">
<arguments>
<arg>list_</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if any element in the `list` is found from it more than once.

The default error message lists all the elements that were found
from the `list` multiple times, but it can be overridden by giving
a custom `msg`. All multiple times found items and their counts are
also logged.

This keyword works with all iterables that can be converted to a list.
The original iterable is never altered.</doc>
</kw>
<kw name="List Should Not Contain Value">
<arguments>
<arg>list_</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>Fails if the `value` is not found from `list`.

See `List Should Contain Value` for an explanation of `msg`.</doc>
</kw>
<kw name="Lists Should Be Equal">
<arguments>
<arg>list1</arg>
<arg>list2</arg>
<arg>msg=None</arg>
<arg>values=True</arg>
<arg>names=None</arg>
</arguments>
<doc>Fails if given lists are unequal.

The keyword first verifies that the lists have equal lengths, and then
it checks are all their values equal. Possible differences between the
values are listed in the default error message like `Index 4: ABC !=
Abc`.

The error message can be configured using `msg` and `values` arguments:
- If `msg` is not given, the default error message is used.
- If `msg` is given and `values` is either Boolean False or a string
  'False' or 'No Values', the error message is simply `msg`.
- Otherwise the error message is `msg` + 'new line' + default.

Optional `names` argument (new in 2.6) can be used for naming
the indices shown in the default error message. It can either
be a list of names matching the indices in the lists or a
dictionary where keys are indices that need to be named. It is
not necessary to name all of the indices.  When using a
dictionary, keys can be either integers or strings that can be
converted to integers.

Examples:
| ${names} = | Create List | First Name | Family Name | Email |
| Lists Should Be Equal | ${people1} | ${people2} | names=${names} |
| ${names} = | Create Dictionary | 0 | First Name | 2 | Email |
| Lists Should Be Equal | ${people1} | ${people2} | names=${names} |

If the items in index 2 would differ in the above examples, the error
message would contain a row like `Index 2 (email): name@foo.com !=
name@bar.com`.</doc>
</kw>
<kw name="Log Dictionary">
<arguments>
<arg>dictionary</arg>
<arg>level=INFO</arg>
</arguments>
<doc>Logs the size and contents of the `dictionary` using given `level`.

Valid levels are TRACE, DEBUG, INFO (default), and WARN.

If you only want to log the size, use keyword `Get Length` from
the BuiltIn library.</doc>
</kw>
<kw name="Log List">
<arguments>
<arg>list_</arg>
<arg>level=INFO</arg>
</arguments>
<doc>Logs the length and contents of the `list` using given `level`.

Valid levels are TRACE, DEBUG, INFO (default), and WARN.

If you only want to the length, use keyword `Get Length` from
the BuiltIn library.</doc>
</kw>
<kw name="Remove Duplicates">
<arguments>
<arg>list_</arg>
</arguments>
<doc>Returns a list without duplicates based on the given `list`.

Creates and returns a new list that contains all items in the given
list so that one item can appear only once. Order of the items in
the new list is the same as in the original except for missing
duplicates. Number of the removed duplicates is logged.

New in Robot Framework 2.7.5.</doc>
</kw>
<kw name="Remove From Dictionary">
<arguments>
<arg>dictionary</arg>
<arg>*keys</arg>
</arguments>
<doc>Removes the given `keys` from the `dictionary`.

If the given `key` cannot be found from the `dictionary`, it
is ignored.

Example:
| Remove From Dictionary | ${D3} | b | x | y |
=&gt;
- ${D3} = {'a': 1, 'c': 3}</doc>
</kw>
<kw name="Remove From List">
<arguments>
<arg>list_</arg>
<arg>index</arg>
</arguments>
<doc>Removes and returns the value specified with an `index` from `list`.

Index '0' means the first position, '1' the second and so on.
Similarly, '-1' is the last position, '-2' the second last, and so on.
Using an index that does not exist on the list causes an error.
The index can be either an integer or a string that can be converted
to an integer.

Example:
| ${x} = | Remove From List | ${L2} | 0 |
=&gt;
- ${x} = 'a'
- ${L2} = ['b']</doc>
</kw>
<kw name="Remove Values From List">
<arguments>
<arg>list_</arg>
<arg>*values</arg>
</arguments>
<doc>Removes all occurences of given `values` from `list`.

It is not an error is a value does not exist in the list at all.

Example:
| Remove Values From List | ${L4} | a | c | e | f |
=&gt;
- ${L4} = ['b', 'd']</doc>
</kw>
<kw name="Reverse List">
<arguments>
<arg>list_</arg>
</arguments>
<doc>Reverses the given list in place.

Note that the given list is changed and nothing is returned. Use
`Copy List` first, if you need to keep also the original order.

| Reverse List | ${L3} |
=&gt;
- ${L3} = ['c', 'b', 'a']</doc>
</kw>
<kw name="Set List Value">
<arguments>
<arg>list_</arg>
<arg>index</arg>
<arg>value</arg>
</arguments>
<doc>Sets the value of `list` specified by `index` to the given `value`.

Index '0' means the first position, '1' the second and so on.
Similarly, '-1' is the last position, '-2' second last, and so on.
Using an index that does not exist on the list causes an error.
The index can be either an integer or a string that can be converted to
an integer.

Example:
| Set List Value | ${L3} | 1  | xxx |
| Set List Value | ${L3} | -1 | yyy |
=&gt;
- ${L3} = ['a', 'xxx', 'yyy']</doc>
</kw>
<kw name="Set To Dictionary">
<arguments>
<arg>dictionary</arg>
<arg>*key_value_pairs</arg>
<arg>**items</arg>
</arguments>
<doc>Adds the given `key_value_pairs` and `items`to the `dictionary`.

See `Create Dictionary` for information about giving items.

Example:
| Set To Dictionary | ${D1} | key | value |
=&gt;
- ${D1} = {'a': 1, 'key': 'value'}</doc>
</kw>
<kw name="Sort List">
<arguments>
<arg>list_</arg>
</arguments>
<doc>Sorts the given list in place.

The strings are sorted alphabetically and the numbers numerically.

Note that the given list is changed and nothing is returned. Use
`Copy List` first, if you need to keep also the original order.

${L} = [2,1,'a','c','b']
| Sort List | ${L} |
=&gt;
- ${L} = [1, 2, 'a', 'b', 'c']</doc>
</kw>
</keywordspec>
